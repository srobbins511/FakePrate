using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class GameManager : MonoBehaviour
{
    public int lives;
    public bool isPaused;
    uint totalScore;
    Coroutine spawnTimer;

    public delegate void SimpleEventHandler();
    public SpawnFactory Factory;
    public Text scoreText;

    public event SimpleEventHandler OnGamePause;
    public event SimpleEventHandler OnGameUnpause;
    public event SimpleEventHandler OnLevelWin;
    public event SimpleEventHandler OnLevelLose;

    public static GameManager Instance;

    LevelInfo levelInfo;

    // Start is called before the first frame update
    void Start()
    {
        if(Instance == null)
        {
            Instance = this;
        } 
        else
        {
            Destroy(this);
        }
        levelInfo = new LevelInfo(1,0,1f,1f,new List<float>(),new List<float>());
        Factory = gameObject.AddComponent<SpawnFactory>();
    }



    /// <summary>
    /// This method controls when the player hits the pause button in the UI the Game pauses and the pause screen is activated.
    /// It also invokes the correct Pause Events.
    /// </summary>
    public void Pause()
    {
        isPaused = !isPaused;
        if(isPaused)
        {
            OnGamePause?.Invoke();
        }
        else
        {
            OnGameUnpause?.Invoke();
        }
    }
    
    /// <summary>
    /// This Coroutine is used to evalute the times that new Targets and new attacks should be generated by the Factory
    /// If the Game is Paused this should get caught in the is paused condition
    /// </summary>
    /// <returns></returns>
    IEnumerator SpawnTimer()
    {
        float timeSinceTargetSpawnBurst = 0;
        int targetSpawnBurstIndexPos = 0;
        int attackSpawnIndexPos = 0;
        float timeSinceAttackSpawn = 0;
        while (true)
        {
            if(isPaused)
            {
                yield return new WaitUntil(() => isPaused == false);
            }
            //this should contain the call to factory for spawning targets
            if(timeSinceTargetSpawnBurst > levelInfo.TargetSpawnTimes[targetSpawnBurstIndexPos])
            {
                targetSpawnBurstIndexPos++;
                if(levelInfo.TargetSpawnTimes.Count <= targetSpawnBurstIndexPos)
                {
                    targetSpawnBurstIndexPos = 0;
                }

                //Update factory Call to Use autogenerated Variable numbers
                Factory.SpawnTargetBurst(Random.Range(1,5));
            }

            //this should contain the call to factory for spawning attacks
            if(timeSinceAttackSpawn > levelInfo.AttackSpawnTimes[attackSpawnIndexPos])
            {
                attackSpawnIndexPos++;
                if(levelInfo.AttackSpawnTimes.Count <= attackSpawnIndexPos)
                {
                    attackSpawnIndexPos = 0;
                }

                //factory call here
                Factory.SpawnAtack();
            }

            //TODO: FIX THIS CODE FROM BEING BROKEN; Time.deltaTime is based on Update not Coroutine
            timeSinceAttackSpawn += Time.deltaTime;
            timeSinceTargetSpawnBurst += Time.deltaTime;
            yield return new WaitForEndOfFrame();
        }
    }
   

    // Update is called once per frame
    void Update()
    {
        
    }

    public void Score(float pointValue)
    {
        totalScore += (uint) (pointValue * levelInfo.scoreMultiplier);
        scoreText.text = "Current Score: " + totalScore;
        Debug.Log("POINTS SCORED: " + totalScore);
    }
}



[System.Serializable]
public struct LevelInfo
{
    
    public int currentLevel;
    public int currentScore;
    public float scoreMultiplier;

    public float goalTargetSpawnChance;
    public List<float> TargetSpawnTimes;
    public List<float> AttackSpawnTimes;

    public LevelInfo(int curLevel, int curScore, float scoreMult, float tarSpawnChance, List<float> tarSpawnTimes, List<float> attackSpawnTimes)
    {
        this.currentLevel = curLevel;
        this.currentScore = curScore;
        this.scoreMultiplier = scoreMult;
        this.goalTargetSpawnChance = tarSpawnChance;
        this.TargetSpawnTimes = tarSpawnTimes;
        this.AttackSpawnTimes = attackSpawnTimes;
    }
}
